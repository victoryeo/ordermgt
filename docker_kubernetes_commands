# create docker secret key
kubectl create secret generic regcred   --from-file=.dockerconfigjson=<path>/.docker/config.json   --type=kubernetes.io/dockerconfigjson
# show version
kubectl version
kubectl cluster-info
kubectl get nodes
kubectl get pods
kubectl get pods -o wide
kubectl describe pods
kubectl get services
kubectl get all
kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10
kubectl get deployments
# can find label name using describe deployments
kubectl describe deployments
# get replicate set
kubectl get rs
kubectl proxy
export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')
kubectl create namespace test
# port forward from internal port 80 to external port 8080
kubectl --namespace test port-forward $POD_NAME 8080:80
# show the log output from the container
kubectl logs $POD_NAME
# execute a command in the container
kubectl exec $POD_NAME env
kubectl exec -ti $POD_NAME bash
# expose the port and create a new service
kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
kubectl expose deployment hello-node --type=LoadBalancer --port=8080
kubectl expose deployment hello-world --type=LoadBalancer --name=my-service
# get pods using label
kubectl get pods -l run=kubernetes-bootcamp
# apply a new label
kubectl label pod $POD_NAME app=v1
kubectl delete service -l run=kubernetes-bootcamp
# scale the deployment
kubectl scale deployments/kubernetes-bootcamp --replicas=4
# perform rolling update
kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2
# check rollout status
kubectl rollout status deployments/kubernetes-bootcamp
# roll back to previous version
kubectl rollout undo deployments/kubernetes-bootcamp
kubectl delete service hello-node
kubectl delete deployment hello-node
# example of applying yaml file to create deployment and associated replica set
kubectl apply -f https://k8s.io/examples/service/load-balancer-example.yaml

# create a new chart in a new directory, only run once
helm create ordermgt
# check syntax of Chart.yaml file
helm lint ./ordermgt/
# install the container image to kubernetes cluster
helm install <release_name> <folder_name>
helm install ordermgt ./ordermgt/ --namespace test
helm install ordermgt ./ordermgt/ --namespace test --set service.type=NodePort
helm install ordermgt ./ordermgt/ --namespace test --values ordermgt/values.yaml
helm ls
helm ls --namespace test
helm delete ordermgt --namespace test
helm uninstall --namespace test ordermgt ./ordermgt

# to run kubernetes locally
minikube version
minikube start
minikube service list
minikube addons list
minikube addons enable metrics-server
minikube addons disable metrics-server
minikube ip
minikube stop
# delete minikube VM!!!!!
minikube delete

# docker commands
# build and tag the docker image
docker build -t <name> .
# build with specific dockerfilename
docker build -f <dockerfilename> -t <name> .
# list docker images
docker image ls
# run container instance from the image we created
docker run -it -p <host_port>:<container_port>  <name>
# run container in detched mode
docker run -itd -p <host_port>:<container_port>  <name>
# show container id
docker ps
# enter the shell of the container whose id is entered
dcker exec -it <container_id> sh
# tag the image
docker tag <tag_id> <dockerhub_name>/<container_name>:latest
# push to docker hub
docker push <dockerhub_name>/<container_name>
# show debug log
docker logs --tail=50 <container_name>

##### working with GKE
# connect to gke cluster
gcloud container clusters get-credentials quorum-test --zone us-central1-c --project me-kyuusandbox-poc
gcloud container clusters get-credentials testonly --zone us-west1-a --project me-kyuusandbox-poc

# select local cluster
kubectl config use-context minikube

# create a gke cluster
gcloud container clusters create <cluster-name> --num-nodes=1
# by default, creare 3 nodes
gcloud container clusters create cluster-name --zone=asia-east2-a

# delete a gke cluster
gcloud  container clusters delete cluster-name --zone=us-west1-a

# list cluster
gcloud  container clusters list

# deploy an application to cluster
kubectl create deployment hello-server --image=gcr.io/google-samples/hello-app:1.0

# expose the deploment
kubectl expose deployment hello-server --type LoadBalancer \
  --port 80 --target-port 8080
  
# get service
kubectl get service hello-server

# delete the app
kubectl delete service hello-server

# Use this command to execute geth command in pods
kubectl exec -i -t <pod_name> --container <container_name> -- geth attach /etc/quorum/qdata/dd/geth.ipc

# connect to pod and container and run "sh" shell
kubectl exec -ti <podname> --container quorum -- sh
# then inside the container, execute geth command
geth attach $QHOME/dd/geth.ipc

# get the manifest of the pod
kubectl get pods <pod_name> -o yaml

# get log of container
kubectl logs <podname> -c <container_name> 

###########
# to initialise local Ubuntu to connnect to GKE
$ gcloud  init

$ kubectl config current-context
minikube

# change k8s connection from minikube to gke
$ gcloud container clusters get-credentials testonly --zone us-west1-a --project me-kyuusandbox-poc
Fetching cluster endpoint and auth data.
kubeconfig entry generated for testonly.

$ kubectl config current-context
gke_me-kyuusandbox-poc_us-west1-a_testonly
